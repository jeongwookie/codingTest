"""
DFS 는 스택 자료구조를 활용하거나, 재귀적으로 정의할 수 있다.
1. 탐색 시작 노드를 스택에 삽입하고 방문 처리를 수행한다.
2. 스택의 최상단 노드에 방문하지 않은 인접한 노드가 하나라도 있으면 해당 노드를 스택에 넣고 방문 처리를 수행한다.
3. 방문하지 않은 인접 노드가 없으면 최상단 노드를 꺼낸다.
4. 2~3의 과정을 더 이상 수행할 수 없을 때까지 반복한다.
"""
# DFS 메서드 정의
def dfs(graph, v, visited):
    # 현재 노드를 방문 처리
    visited[v] = True
    print(v, end=' ')
    # 현재 노드와 연결된 다른 노드를 재귀적으로 방문
    for i in graph[v]: # 현재 노드 v와 연결된 다른 모든 노드에 대해서,
        if not visited[i]: # 만약 해당 노드를 방문한 기록이 없다면,
            dfs(graph, i, visited) # 해당 노드에 대해 재귀적으로 dfs!


if __name__ == "__main__":
    # 각 노드가 연결된 정보를 표현 (2차원 리스트)
    graph = [
        [], # 0번으로 시작하지 않고, 1번 노드부터 읽기 위해서 빈칸으로 둠
        [2, 3, 8],
        [1, 7],
        [1, 4, 5],
        [3, 5],
        [3, 4],
        [7],
        [2, 6, 8],
        [1, 7]
    ]

    # 각 노드가 방문된 정보를 표현 (1차원 리스트)
    visited = [False] * 9 # 마찬가지로, 0번 인덱스를 사용하지 않고 1~8번 노드를 가지고 있으므로 총 9개

    # 정의된 DFS 함수 호출
    dfs(graph, 1, visited)


